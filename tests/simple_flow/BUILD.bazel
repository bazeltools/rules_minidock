exports_files(["puller"])
load(
    "@com_github_bazeltools_rules_minidock//minidock:container_assemble.bzl",
    "container_assemble",
)
load(
    "@com_github_bazeltools_rules_minidock//minidock:container_data.bzl",
    "container_data",
)
load(
    "@com_github_bazeltools_rules_minidock//minidock:container_compose.bzl",
    "container_compose",
)
load(
    "@com_github_bazeltools_rules_minidock//minidock:container_push.bzl",
    "container_push",
)
load(
    "@com_github_bazeltools_rules_minidock//minidock:container_config.bzl",
    "container_config",
)
genrule(
    name = "external_config_file",
    outs = ["ConfigFile.json"],
    cmd = """
cat << EOF > $@
{
  "Env": [
    "EXTERNALENV1=extenv1"
  ],
  "Labels": {
    "label1": "this-will-get-overwritten-by-the-config-below",
    "external-config-label-1": "extlabel1",
    "external-config-label-2": "extlabel2"
  }
}
EOF""",
    stamp = 1,
)

genrule(
    name = "external_config_file_2",
    outs = ["ConfigFile2.json"],
    cmd = """
cat << EOF > $@
{
  "Labels": {
    "external-config-label-3": "extlabel3",
    "external-config-label-4": "extlabel4"
  }
}
EOF""",
    stamp = 1,
)

container_data(
    name = "file_a_data",
    files = ["file_a.txt"],
)

container_data(
    name = "file_b_data",
    files = ["file_b.txt"],
)

container_config(
    name = "user_and_app",
    user = "nfbasic",
    cmd = [
        "/usr/bin/my_app",
    ],
)

container_config(
    name = "labels_and_env",
    labels = {"label1": "foo",
              "label2": "bar"},
    env = {"ENV1": "FOO",
           "ENV2": "BAR"}
)

container_compose(
    name = "test_simple_imagen",
    base = "@bazel_320//:metadata",
    layers = [
        ":file_a_data",
        ":file_b_data",
        ":user_and_app",
        ":labels_and_env",
    ],
    external_config = [":external_config_file", ":external_config_file_2"]
)

container_assemble(
    name = "test_assemble_simple",
    composed = ":test_simple_imagen",
)

container_push(
    name = "test_push_simple",
    assembled = ":test_assemble_simple",
    registry_format = "Docker",
    registry = "http://localhost:9000",
    repository = "docker/test",
    container_tags = ["unchanged_tag1"],
)
